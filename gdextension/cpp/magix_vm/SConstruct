# region SCONS STUFF

Import("env")
env = env.Clone()

# CHECK IF WE WANT TO BUILD TESTS
vars = Variables(None, ARGUMENTS)


def yes_no_config(name: str, help: str, default: bool) -> bool:
    vars.Add(
        BoolVariable(
            key=name,
            help=help,
            default=default,
        )
    )
    option = ARGUMENTS.get(name, None)
    if option is None:
        return default
    elif option in ("y", "yes", "true", "t", "1", "on"):
        return True
    elif option in ("n", "no", "false", "f", "0", "off"):
        return False
    else:
        raise ValueError("invalid option")


isa_tool = Tool("isa_builder", toolpath=["."])
isa_tool.generate(env)


# endregion

# region SETTINGS

build_tests = yes_no_config(
    name="with_tests",
    help="Are tests included?",
    default=env["target"] in ["editor", "template_debug"],
)

suffix = env["suffix"].replace(".dev", "").replace(".universal", "")

libname = "MagixVM"
lib_filename = (
    f"{env.subst('$SHLIBPREFIX')}{libname}{suffix}{env.subst('$SHLIBSUFFIX')}"
)

# endregion

# region FLAGS

if build_tests:
    env.Append(
        CPPDEFINES=[
            "MAGIX_BUILD_TESTS=1",
            "DOCTEST_CONFIG_ASSERTS_RETURN_VALUES=1",
            "DOCTEST_CONFIG_REQUIRE_STRINGIFICATION_FOR_ALL_USED_TYPES=1",
        ]
    )
    if env.get("is_msvc", False):
        env.Append(CPPPATH=["../thirdparty/doctest/doctest"])
    else:
        env.AppendUnique(CCFLAGS=("-isystem", "thirdparty/doctest/doctest"))
else:
    env.Append(CPPDEFINES=["DOCTEST_CONFIG_DISABLE"])

if env.get("is_msvc", False):
    env.Append(CXXFLAGS=["/W4"])
else:
    env.Append(
        CXXFLAGS=[
            "-Wall",
            "-Wextra",
            # "-pedantic", # can't use that because godot loves some anon structs
            "-Wno-unused-parameter",  # because godot macros ...
            "-Wimplicit-fallthrough",  # clang does not add this with -Wall or -Wextra
            "-Werror=implicit-fallthrough",
        ]
    )

# endregion


env["COMPILATIONDB_USE_ABSPATH"] = True
env["COMPILATIONDB_PATH_FILTER"] = "magix/*"


processed_isa_toml = env.IsaPreprocess("gen/magix_isa.processed.toml", "magix_isa.toml")
inst_data_gen_cpp = env.JinjaConfigure(
    "src/magix_vm/compilation/instruction_data.gen.cpp",
    ["src/magix_vm/compilation/instruction_data.cpp.jinja", processed_isa_toml],
)

executor_gen_cpp = env.JinjaConfigure(
    "src/magix_vm/execution/executor.gen.cpp",
    ["src/magix_vm/execution/executor.cpp.jinja", processed_isa_toml],
)

default_cpppath = ["src/"]
test_cpppath = default_cpppath + ["test/"]


default_sources = [
    "src/magix_vm/compilation/assembler.cpp",
    "src/magix_vm/compilation/lexer.cpp",
    "src/magix_vm/convert_magix_godot.cpp",
    "src/magix_vm/execution/runner.cpp",
    "src/magix_vm/magix.cpp",
    "src/magix_vm/MagixAsmProgram.cpp",
    "src/magix_vm/MagixByteCode.cpp",
    "src/magix_vm/MagixCaster.cpp",
    "src/magix_vm/MagixCastSlot.cpp",
    "src/magix_vm/MagixVirtualMachine.cpp",
    inst_data_gen_cpp,
    executor_gen_cpp,
]

if build_tests:
    default_sources += [
        "src/magix_vm/doctest_impl.cpp",
    ]

if not build_tests:
    test_sources = []
else:
    test_sources = [
        "test/magix_vm/execution/full_vm.cpp",
        "test/magix_vm/execution/persistence.cpp",
        "test/magix_vm/instructions/__unittest.put.u32.cpp",
        "test/magix_vm/instructions/nonop.cpp",
        "test/magix_vm/instructions/nop.cpp",
        "test/magix_vm/ranges_test.cpp",
    ]

doc_sources = [
    "../../doc_classes/MagixAsmProgram.xml",
    "../../doc_classes/MagixByteCode.xml",
    "../../doc_classes/MagixVirtualMachine.xml",
]

if env["target"] in ["editor", "template_debug"]:
    try:
        doc_data = env.GodotCPPDocData(
            "src/magix_vm/gen/doc_data.gen.cpp", source=doc_sources
        )
        default_sources.append(doc_data)
    except AttributeError:
        print("Not including class reference as we're targeting a pre-4.3 baseline.")

default_objects = [
    env.SharedObject(input_file, CPPPATH=env["CPPPATH"] + default_cpppath)
    for input_file in default_sources
]

test_objects = [
    env.SharedObject(input_file, CPPPATH=env["CPPPATH"] + test_cpppath)
    for input_file in test_sources
]


library = env.SharedLibrary(
    f"../../extensions/{env['platform']}/{lib_filename}",
    source=[test_objects, default_objects],
)


default_args = [library]

Default(*default_args)
