Import("env")
env = env.Clone()

# CHECK IF WE WANT TO BUILD TESTS
vars = Variables(None, ARGUMENTS)
vars.Add(
    BoolVariable(
        key="with_tests",
        help="Are tests included?",
        default=env.get("use_hot_reload", None),
    )
)

with_tests = False
cmd_tests = ARGUMENTS.get("with_tests", None)
if cmd_tests == None:
    if env["target"] in ["editor", "template_debug"]:
        with_tests = True
else:
    if cmd_tests in ("y", "yes", "true", "t", "1", "on"):
        with_tests = True
    elif cmd_tests in ("n", "no", "false", "f", "0", "off"):
        with_tests = False
    else:
        raise ValueError("invalid option")

if with_tests:
    env.Append(
        CPPDEFINES=[
            "MAGIX_BUILD_TESTS=1",
            "DOCTEST_CONFIG_ASSERTS_RETURN_VALUES=1",
        ]
    )
    env.Append(CPPPATH=["../thirdparty/doctest/doctest"])
else:
    env.Append(CPPDEFINES=["DOCTEST_CONFIG_DISABLE"])

# SUFFIX AND LIB NAME
suffix = env["suffix"].replace(".dev", "").replace(".universal", "")

libname = "MagixVM"
lib_filename = (
    f"{env.subst('$SHLIBPREFIX')}{libname}{suffix}{env.subst('$SHLIBSUFFIX')}"
)

# SETUP

env["COMPILATIONDB_USE_ABSPATH"] = True
env["COMPILATIONDB_PATH_FILTER"] = "magix/*"

isa_tool = Tool("isa_builder", toolpath=["."])
isa_tool.generate(env)

# FLAGS

if env.get("is_msvc", False):
    env.Append(CXXFLAGS=["/W4"])
else:
    env.Append(
        CXXFLAGS=[
            "-Wall",
            "-Wextra",
            # "-pedantic", # can't use that because godot loves some anon structs
            "-Wno-unused-parameter",  # because godot macros ...
        ]
    )

# SOURCES

processed_isa = env.IsaPreprocess("gen/magix_isa.processed.toml", "magix_isa.toml")
inst_data = env.JinjaConfigure(
    "src/magix_vm/compilation/instruction_data.gen.cpp",
    ["src/magix_vm/compilation/instruction_data.cpp.jinja", processed_isa],
)

env.Append(CPPPATH=["src/"])
sources = [
    "src/magix_vm/magix.cpp",
    "src/magix_vm/MagixAsmProgram.cpp",
    "src/magix_vm/MagixByteCode.cpp",
    "src/magix_vm/MagixVirtualMachine.cpp",
    "src/magix_vm/compilation/assembler.cpp",
    "src/magix_vm/compilation/lexer.cpp",
    inst_data,
]
doc_sources = [
    "../../doc_classes/MagixAsmProgram.xml",
    "../../doc_classes/MagixByteCode.xml",
    "../../doc_classes/MagixVirtualMachine.xml",
]
if with_tests:
    sources += [
        "src/magix_vm/doctest_impl.cpp",
        "src/magix_vm/ranges_test.cpp",
    ]


if env["target"] in ["editor", "template_debug"]:
    try:
        doc_data = env.GodotCPPDocData(
            "src/magix_vm/gen/doc_data.gen.cpp", source=doc_sources
        )
        sources.append(doc_data)
    except AttributeError:
        print("Not including class reference as we're targeting a pre-4.3 baseline.")


library = env.SharedLibrary(
    f"../../extensions/{env['platform']}/{lib_filename}",
    source=sources,
)


default_args = [library]

Default(*default_args)
