[[instructions]]
# nop instruction that does nothing
mnenomic = "nop"
registers = []
[instructions.action]
cpp = """
// no op does nothing"""

[[instructions]]
# no nop-instruction, does nothing, but does not even emit a nop
# useful if you want to emit a code label right now
mnenomic = "nonop"
pseudo = true
registers = []
mapping = []


# # # CONTROL FLOW # # #

[[instructions]]
mnenomic = "yield_to"
[[instructions.registers]]
name = "target"
mode = "immediate"
type = "u16"
[instructions.action]
cpp = """
YIELD(target_value);"""

[[instructions]]
mnenomic = "exit"
[instructions.action]
cpp = """
EXIT_OK();"""

[[instructions]]
mnenomic = "goto"
[[instructions.registers]]
name = "target"
mode = "immediate"
type = "u16"
[instructions.action]
cpp = """
NEXT_INSTRUCTION = target_value;"""

[[instructions]]
mnenomic = "if.zero"
[[instructions.registers]]
name = "target"
mode = "immediate"
type = "u16"
[[instructions.registers]]
name = "test"
mode = "stack"
type = "u32"
read = true
[instructions.action]
cpp = """
if (test_value_in == 0)
{
    NEXT_INSTRUCTION = target_value;
}"""


# # # MOVE INSTRUCTIONS # # #

[[instructions]]
# move an i8
mnenomic = "mov.i8"
pseudo = true
[[instructions.registers]]
name = "dst"
mode = "stack"
type = "i8"
write = true
[[instructions.registers]]
name = "src"
mode = "stack"
type = "i8"
read = true
[[instructions.mapping]]
mnenomic = "mov.b8"
[[instructions.mapping.registers]]
action = "copy"
src = "dst"
offset = "0"
[[instructions.mapping.registers]]
action = "copy"
src = "src"
offset = "0"

[[instructions]]
# move an i16
mnenomic = "mov.i16"
pseudo = true
[[instructions.registers]]
name = "dst"
mode = "stack"
type = "i16"
write = true
[[instructions.registers]]
name = "src"
mode = "stack"
type = "i16"
read = true
[[instructions.mapping]]
mnenomic = "mov.b16"
[[instructions.mapping.registers]]
action = "copy"
src = "dst"
offset = "0"
[[instructions.mapping.registers]]
action = "copy"
src = "src"
offset = "0"

[[instructions]]
# move an i32
mnenomic = "mov.i32"
pseudo = true
[[instructions.registers]]
name = "dst"
mode = "stack"
type = "i32"
write = true
[[instructions.registers]]
name = "src"
mode = "stack"
type = "i32"
read = true
[[instructions.mapping]]
mnenomic = "mov.b32"
[[instructions.mapping.registers]]
action = "copy"
src = "dst"
offset = "0"
[[instructions.mapping.registers]]
action = "copy"
src = "src"
offset = "0"

[[instructions]]
# move an u8
mnenomic = "mov.u8"
pseudo = true
[[instructions.registers]]
name = "dst"
mode = "stack"
type = "u8"
write = true
[[instructions.registers]]
name = "src"
mode = "stack"
type = "u8"
read = true
[[instructions.mapping]]
mnenomic = "mov.b8"
[[instructions.mapping.registers]]
action = "copy"
src = "dst"
offset = "0"
[[instructions.mapping.registers]]
action = "copy"
src = "src"
offset = "0"

[[instructions]]
# move an u16
mnenomic = "mov.u16"
pseudo = true
[[instructions.registers]]
name = "dst"
mode = "stack"
type = "u16"
write = true
[[instructions.registers]]
name = "src"
mode = "stack"
type = "u16"
read = true
[[instructions.mapping]]
mnenomic = "mov.b16"
[[instructions.mapping.registers]]
action = "copy"
src = "dst"
offset = "0"
[[instructions.mapping.registers]]
action = "copy"
src = "src"
offset = "0"

[[instructions]]
# move an u32
mnenomic = "mov.u32"
pseudo = true
[[instructions.registers]]
name = "dst"
mode = "stack"
type = "u32"
write = true
[[instructions.registers]]
name = "src"
mode = "stack"
type = "u32"
read = true
[[instructions.mapping]]
mnenomic = "mov.b32"
[[instructions.mapping.registers]]
action = "copy"
src = "dst"
offset = "0"
[[instructions.mapping.registers]]
action = "copy"
src = "src"
offset = "0"

[[instructions]]
mnenomic = "mov.f32"
pseudo = true
[[instructions.registers]]
name = "dst"
mode = "stack"
type = "f32"
write = true
[[instructions.registers]]
name = "src"
mode = "stack"
type = "f32"
read = true
[[instructions.mapping]]
mnenomic = "mov.b32"
[[instructions.mapping.registers]]
action = "copy"
src = "dst"
offset = "0"
[[instructions.mapping.registers]]
action = "copy"
src = "src"
offset = "0"

[[instructions]]
mnenomic = "mov.b32"
[[instructions.registers]]
name = "dst"
mode = "stack"
type = "b32"
write = true
[[instructions.registers]]
name = "src"
mode = "stack"
type = "b32"
read = true
[instructions.action]
cpp = """
dst_value_out = src_value_in;"""


# # # READ ROM # # #


[[instructions]]
mnenomic = "load.u32"
pseudo = true
[[instructions.registers]]
name = "dst"
mode = "stack"
type = "u32"
write = true
[[instructions.registers]]
name = "addr"
mode = "immediate"
type = "u16"
[[instructions.mapping]]
mnenomic = "load.b32"
[[instructions.mapping.registers]]
action = "copy"
src = "dst"
offset = "0"
[[instructions.mapping.registers]]
action = "copy"
src = "addr"
offset = "0"

[[instructions]]
mnenomic = "load.i32"
pseudo = true
[[instructions.registers]]
name = "dst"
mode = "stack"
type = "i32"
write = true
[[instructions.registers]]
name = "addr"
mode = "immediate"
type = "u16"
[[instructions.mapping]]
mnenomic = "load.b32"
[[instructions.mapping.registers]]
action = "copy"
src = "dst"
offset = "0"
[[instructions.mapping.registers]]
action = "copy"
src = "addr"
offset = "0"

[[instructions]]
mnenomic = "load.f32"
pseudo = true
[[instructions.registers]]
name = "dst"
mode = "stack"
type = "f32"
write = true
[[instructions.registers]]
name = "addr"
mode = "immediate"
type = "u16"
[[instructions.mapping]]
mnenomic = "load.b32"
[[instructions.mapping.registers]]
action = "copy"
src = "dst"
offset = "0"
[[instructions.mapping.registers]]
action = "copy"
src = "addr"
offset = "0"

[[instructions]]
mnenomic = "load.b32"
[[instructions.registers]]
name = "dst"
mode = "stack"
type = "b32"
write = true
[[instructions.registers]]
name = "addr"
mode = "immediate"
type = "u16"
[instructions.action]
cpp = """
CHECKED_ROM_READ(b32, dst_value_out, addr_value);"""


# # # PAGES # # #


[[instructions]]
mnenomic = "fork.load"
[[instructions.registers]]
name = "dst"
mode = "stack"
type = "undefined"
[[instructions.registers]]
name = "offset"
mode = "immediate"
type = "u16"
[[instructions.registers]]
name = "size"
mode = "immediate"
type = "u16"
[instructions.action]
cpp = """
TRAP_IF(STACK_POINTER + dst_reg + size_value > STACK_SIZE, TRAP_MEM_ACCESS_USER);
TRAP_IF(0ull + offset_value + size_value > PAGES.primitive_fork.size(), TRAP_MEM_ACCESS_USER);
std::memcpy(&STACK[STACK_POINTER + dst_reg], PAGES.primitive_fork.data() + offset_value, size_value);"""

[[instructions]]
mnenomic = "fork.store"
[[instructions.registers]]
name = "src"
mode = "stack"
type = "undefined"
[[instructions.registers]]
name = "offset"
mode = "immediate"
type = "u16"
[[instructions.registers]]
name = "size"
mode = "immediate"
type = "u16"
[instructions.action]
cpp = """
TRAP_IF(STACK_POINTER + src_reg + size_value > STACK_SIZE, TRAP_MEM_ACCESS_USER);
TRAP_IF(0ull + offset_value + size_value > PAGES.primitive_fork.size(), TRAP_MEM_ACCESS_USER);
std::memcpy(PAGES.primitive_fork.data() + offset_value, &STACK[STACK_POINTER + src_reg], size_value);"""

[[instructions]]
mnenomic = "shared.load"
[[instructions.registers]]
name = "dst"
mode = "stack"
type = "undefined"
[[instructions.registers]]
name = "offset"
mode = "immediate"
type = "u16"
[[instructions.registers]]
name = "size"
mode = "immediate"
type = "u16"
[instructions.action]
cpp = """
TRAP_IF(STACK_POINTER + dst_reg + size_value > STACK_SIZE, TRAP_MEM_ACCESS_USER);
TRAP_IF(0ull + offset_value + size_value > PAGES.primitive_shared.size(), TRAP_MEM_ACCESS_USER);
std::memcpy(&STACK[STACK_POINTER + dst_reg], PAGES.primitive_shared.data() + offset_value, size_value);"""

[[instructions]]
mnenomic = "shared.store"
[[instructions.registers]]
name = "src"
mode = "stack"
type = "undefined"
[[instructions.registers]]
name = "offset"
mode = "immediate"
type = "u16"
[[instructions.registers]]
name = "size"
mode = "immediate"
type = "u16"
[instructions.action]
cpp = """
TRAP_IF(STACK_POINTER + src_reg + size_value > STACK_SIZE, TRAP_MEM_ACCESS_USER);
TRAP_IF(0ull + offset_value + size_value > PAGES.primitive_shared.size(), TRAP_MEM_ACCESS_USER);
std::memcpy(PAGES.primitive_shared.data() + offset_value, &STACK[STACK_POINTER + src_reg], size_value);"""


# # # SET IMMEDIATE # # #


[[instructions]]
mnenomic = "set.u16"
[[instructions.registers]]
name = "dst"
mode = "stack"
type = "u16"
write = true
[[instructions.registers]]
name = "val"
mode = "immediate"
type = "u16"
[instructions.action]
cpp = """
dst_value_out = val_value;"""

[[instructions]]
mnenomic = "set.i16"
pseudo = true
[[instructions.registers]]
name = "dst"
mode = "stack"
type = "i16"
write = true
[[instructions.registers]]
name = "val"
mode = "immediate"
type = "i16"
[[instructions.mapping]]
mnenomic = "set.u16"
[[instructions.mapping.registers]]
action = "copy"
src = "dst"
offset = "0"
[[instructions.mapping.registers]]
action = "copy"
src = "val"
offset = "0"

[[instructions]]
mnenomic = "set.u32"
[[instructions.registers]]
name = "dst"
mode = "stack"
type = "u32"
write = true
[[instructions.registers]]
name = "val"
mode = "immediate"
type = "u16"
[instructions.action]
cpp = """
dst_value_out = val_value;"""

[[instructions]]
mnenomic = "set.i32"
[[instructions.registers]]
name = "dst"
mode = "stack"
type = "i32"
write = true
[[instructions.registers]]
name = "val"
mode = "immediate"
type = "i16"
[instructions.action]
cpp = """
dst_value_out = val_value;"""


# # # ADDRESS STUFF # # #

[[instructions]]
# Basically lea... without indexing and everything cool about lea
mnenomic = "addr_of"
[[instructions.registers]]
name = "dst"
mode = "stack"
type = "u32"
write = true
[[instructions.registers]]
name = "src"
mode = "stack"
type = "undefined"
[instructions.action]
cpp_silence_clang = ["shorten-64-to-32"]
cpp = """
dst_value_out = STACK_POINTER + src_reg;"""

[[instructions]]
# grow/shrink stack
mnenomic = "stack_resize"
[[instructions.registers]]
name = "size"
mode = "immediate"
type = "i16"
[instructions.action]
cpp = """
STACK_POINTER = STACK_POINTER + size_value;"""

[[instructions]]
# set stack pointer
mnenomic = "set_stack"
[[instructions.registers]]
name = "stack_pointer"
mode = "stack"
type = "u32"
read = true
[instructions.action]
cpp = """
STACK_POINTER = stack_pointer_value_in;"""

[[instructions]]
# get stack pointer
mnenomic = "get_stack"
[[instructions.registers]]
name = "dst"
mode = "stack"
type = "u32"
write = true
[instructions.action]
cpp_silence_clang = ["shorten-64-to-32"]
cpp = """
dst_value_out = STACK_POINTER;"""


# # # Arithmetic # # #

[[instructions]]
# u32 = u32 + u32
mnenomic = "add.u32"
[[instructions.registers]]
name = "dst"
mode = "stack"
type = "u32"
write = true
[[instructions.registers]]
name = "op1"
mode = "stack"
type = "u32"
read = true
[[instructions.registers]]
name = "op2"
mode = "stack"
type = "u32"
read = true
[instructions.action]
cpp = """
dst_value_out = op1_value_in + op2_value_in;"""

[[instructions]]
# u32 = u32 + imm
mnenomic = "add.u32.imm"
[[instructions.registers]]
name = "dst"
mode = "stack"
type = "u32"
write = true
[[instructions.registers]]
name = "op1"
mode = "stack"
type = "u32"
read = true
[[instructions.registers]]
name = "op2"
mode = "immediate"
type = "u16"
[instructions.action]
cpp = """
dst_value_out = op1_value_in + op2_value;"""


[[instructions]]
# u32 = u32 - u32
mnenomic = "sub.u32"
[[instructions.registers]]
name = "dst"
mode = "stack"
type = "u32"
write = true
[[instructions.registers]]
name = "op1"
mode = "stack"
type = "u32"
read = true
[[instructions.registers]]
name = "op2"
mode = "stack"
type = "u32"
read = true
[instructions.action]
cpp = """
dst_value_out = op1_value_in - op2_value_in;"""

[[instructions]]
# u32 = u32 - imm
mnenomic = "sub.u32.imm"
[[instructions.registers]]
name = "dst"
mode = "stack"
type = "u32"
write = true
[[instructions.registers]]
name = "op1"
mode = "stack"
type = "u32"
read = true
[[instructions.registers]]
name = "op2"
mode = "immediate"
type = "u16"
[instructions.action]
cpp = """
dst_value_out = op1_value_in - op2_value;"""


# # # OBJECT # # #

[[instructions]]
# get caster id
mnenomic = "get_caster"
[[instructions.registers]]
name = "dst"
mode = "stack"
type = "u32"
read = true
[instructions.action]
cpp = """
CHECK_OBJ_SLOT(dst_value_in);
CLEAR_OBJ_SLOT(dst_value_in);
OBJECTS[dst_value_in] = ObjectVariant{
    ObjectTag::GODOT_ID,
    CONTEXT.caster_id,
};"""

[[instructions]]
# get caster id
mnenomic = "get_object_id"
[[instructions.registers]]
name = "dst"
mode = "stack"
type = "u64"
write = true
[[instructions.registers]]
name = "object"
mode = "stack"
type = "u32"
read = true
[instructions.action]
cpp = """
CHECK_OBJ_SLOT(object_value_in);
if (OBJECTS[object_value_in].tag == ObjectTag::GODOT_ID) {
    dst_value_out = OBJECTS[object_value_in].id;
} else {
    dst_value_out = 0;
}
"""


# # # MANA # # #


[[instructions]]
# get bound mana
mnenomic = "get_bound_mana"
[[instructions.registers]]
name = "value"
mode = "stack"
type = "f32"
write = true
[instructions.action]
cpp = """
value_value_out = CONTEXT.bound_mana;
"""


[[instructions]]
mnenomic = "allocate_mana"
[[instructions.registers]]
name = "got"
mode = "stack"
type = "f32"
write = true
[[instructions.registers]]
name = "request"
mode = "stack"
type = "f32"
read = true
[instructions.action]
cpp = """
got_value_out = CONTEXT.caster_node->allocate_mana(request_value_in);
CONTEXT.bound_mana += got_value_out;
"""


# # # UNIT TEST # # #

[[instructions]]
mnenomic = "__unittest.put.u8"
[[instructions.registers]]
name = "actual"
mode = "stack"
type = "u8"
read = true
[instructions.action]
cpp = """
#ifdef MAGIX_BUILD_TESTS
CONTEXT.test_output.emplace_back(actual_value_in);
#endif // MAGIX_BUILD_TESTS"""

[[instructions]]
mnenomic = "__unittest.put.u16"
[[instructions.registers]]
name = "actual"
mode = "stack"
type = "u16"
read = true
[instructions.action]
cpp = """
#ifdef MAGIX_BUILD_TESTS
CONTEXT.test_output.emplace_back(actual_value_in);
#endif // MAGIX_BUILD_TESTS"""

[[instructions]]
mnenomic = "__unittest.put.u32"
[[instructions.registers]]
name = "actual"
mode = "stack"
type = "u32"
read = true
[instructions.action]
cpp = """
#ifdef MAGIX_BUILD_TESTS
CONTEXT.test_output.emplace_back(actual_value_in);
#endif // MAGIX_BUILD_TESTS"""

[[instructions]]
mnenomic = "__unittest.put.u64"
[[instructions.registers]]
name = "actual"
mode = "stack"
type = "u64"
read = true
[instructions.action]
cpp = """
#ifdef MAGIX_BUILD_TESTS
CONTEXT.test_output.emplace_back(actual_value_in);
#endif // MAGIX_BUILD_TESTS"""

[[instructions]]
mnenomic = "__unittest.put.i8"
[[instructions.registers]]
name = "actual"
mode = "stack"
type = "i8"
read = true
[instructions.action]
cpp = """
#ifdef MAGIX_BUILD_TESTS
CONTEXT.test_output.emplace_back(actual_value_in);
#endif // MAGIX_BUILD_TESTS"""

[[instructions]]
mnenomic = "__unittest.put.i16"
[[instructions.registers]]
name = "actual"
mode = "stack"
type = "i16"
read = true
[instructions.action]
cpp = """
#ifdef MAGIX_BUILD_TESTS
CONTEXT.test_output.emplace_back(actual_value_in);
#endif // MAGIX_BUILD_TESTS"""

[[instructions]]
mnenomic = "__unittest.put.i32"
[[instructions.registers]]
name = "actual"
mode = "stack"
type = "i32"
read = true
[instructions.action]
cpp = """
#ifdef MAGIX_BUILD_TESTS
CONTEXT.test_output.emplace_back(actual_value_in);
#endif // MAGIX_BUILD_TESTS"""

[[instructions]]
mnenomic = "__unittest.put.i64"
[[instructions.registers]]
name = "actual"
mode = "stack"
type = "i64"
read = true
[instructions.action]
cpp = """
#ifdef MAGIX_BUILD_TESTS
CONTEXT.test_output.emplace_back(actual_value_in);
#endif // MAGIX_BUILD_TESTS"""

[[instructions]]
mnenomic = "__unittest.put.f32"
[[instructions.registers]]
name = "actual"
mode = "stack"
type = "f32"
read = true
[instructions.action]
cpp = """
#ifdef MAGIX_BUILD_TESTS
CONTEXT.test_output.emplace_back(actual_value_in);
#endif // MAGIX_BUILD_TESTS"""

[[instructions]]
mnenomic = "__unittest.put.f64"
[[instructions.registers]]
name = "actual"
mode = "stack"
type = "f64"
read = true
[instructions.action]
cpp = """
#ifdef MAGIX_BUILD_TESTS
CONTEXT.test_output.emplace_back(actual_value_in);
#endif // MAGIX_BUILD_TESTS"""
