[[instructions]]
# nop instruction that does nothing
mnenomic = "nop"
registers = []
[instructions.action]
cpp = """
// no op does nothing"""

[[instructions]]
# no nop-instruction, does nothing, but does not even emit a nop
# useful if you want to emit a code label right now
mnenomic = "nonop"
pseudo = true
registers = []
mapping = []


# # # MOVE INSTRUCTIONS # # #

[[instructions]]
# move an i8
mnenomic = "mov.i8"
pseudo = true
[[instructions.registers]]
name = "dst"
mode = "stack"
type = "i8"
write = true
[[instructions.registers]]
name = "src"
mode = "stack"
type = "i8"
read = true
[[instructions.mapping]]
mnenomic = "mov.b8"
[[instructions.mapping.registers]]
action = "copy"
src = "dst"
offset = "0"
[[instructions.mapping.registers]]
action = "copy"
src = "src"
offset = "0"

[[instructions]]
# move an i16
mnenomic = "mov.i16"
pseudo = true
[[instructions.registers]]
name = "dst"
mode = "stack"
type = "i16"
write = true
[[instructions.registers]]
name = "src"
mode = "stack"
type = "i16"
read = true
[[instructions.mapping]]
mnenomic = "mov.b16"
[[instructions.mapping.registers]]
action = "copy"
src = "dst"
offset = "0"
[[instructions.mapping.registers]]
action = "copy"
src = "src"
offset = "0"

[[instructions]]
# move an i32
mnenomic = "mov.i32"
pseudo = true
[[instructions.registers]]
name = "dst"
mode = "stack"
type = "i32"
write = true
[[instructions.registers]]
name = "src"
mode = "stack"
type = "i32"
read = true
[[instructions.mapping]]
mnenomic = "mov.b32"
[[instructions.mapping.registers]]
action = "copy"
src = "dst"
offset = "0"
[[instructions.mapping.registers]]
action = "copy"
src = "src"
offset = "0"

[[instructions]]
# move an u8
mnenomic = "mov.u8"
pseudo = true
[[instructions.registers]]
name = "dst"
mode = "stack"
type = "u8"
write = true
[[instructions.registers]]
name = "src"
mode = "stack"
type = "u8"
read = true
[[instructions.mapping]]
mnenomic = "mov.b8"
[[instructions.mapping.registers]]
action = "copy"
src = "dst"
offset = "0"
[[instructions.mapping.registers]]
action = "copy"
src = "src"
offset = "0"

[[instructions]]
# move an u16
mnenomic = "mov.u16"
pseudo = true
[[instructions.registers]]
name = "dst"
mode = "stack"
type = "u16"
write = true
[[instructions.registers]]
name = "src"
mode = "stack"
type = "u16"
read = true
[[instructions.mapping]]
mnenomic = "mov.b16"
[[instructions.mapping.registers]]
action = "copy"
src = "dst"
offset = "0"
[[instructions.mapping.registers]]
action = "copy"
src = "src"
offset = "0"

[[instructions]]
# move an u32
mnenomic = "mov.u32"
pseudo = true
[[instructions.registers]]
name = "dst"
mode = "stack"
type = "u32"
write = true
[[instructions.registers]]
name = "src"
mode = "stack"
type = "u32"
read = true
[[instructions.mapping]]
mnenomic = "mov.b32"
[[instructions.mapping.registers]]
action = "copy"
src = "dst"
offset = "0"
[[instructions.mapping.registers]]
action = "copy"
src = "src"
offset = "0"

[[instructions]]
mnenomic = "mov.f32"
pseudo = true
[[instructions.registers]]
name = "dst"
mode = "stack"
type = "f32"
write = true
[[instructions.registers]]
name = "src"
mode = "stack"
type = "f32"
read = true
[[instructions.mapping]]
mnenomic = "mov.b32"
[[instructions.mapping.registers]]
action = "copy"
src = "dst"
offset = "0"
[[instructions.mapping.registers]]
action = "copy"
src = "src"
offset = "0"

[[instructions]]
mnenomic = "mov.b32"
[[instructions.registers]]
name = "dst"
mode = "stack"
type = "b32"
write = true
[[instructions.registers]]
name = "src"
mode = "stack"
type = "b32"
read = true
[instructions.action]
cpp = """
dst_value_out = src_value_in;"""

# # # READ ROM # # #
[[instructions]]
mnenomic = "const.u32"
pseudo = true
[[instructions.registers]]
name = "dst"
mode = "stack"
type = "u32"
write = true
[[instructions.registers]]
name = "addr"
mode = "immediate"
type = "u16"
[[instructions.mapping]]
mnenomic = "const.b32"
[[instructions.mapping.registers]]
action = "copy"
src = "dst"
offset = "0"
[[instructions.mapping.registers]]
action = "copy"
src = "addr"
offset = "0"

[[instructions]]
mnenomic = "const.i32"
pseudo = true
[[instructions.registers]]
name = "dst"
mode = "stack"
type = "i32"
write = true
[[instructions.registers]]
name = "addr"
mode = "immediate"
type = "u16"
[[instructions.mapping]]
mnenomic = "const.b32"
[[instructions.mapping.registers]]
action = "copy"
src = "dst"
offset = "0"
[[instructions.mapping.registers]]
action = "copy"
src = "addr"
offset = "0"

[[instructions]]
mnenomic = "const.b32"
[[instructions.registers]]
name = "dst"
mode = "stack"
type = "b32"
write = true
[[instructions.registers]]
name = "addr"
mode = "immediate"
type = "u16"
[instructions.action]
cpp = """
CHECKED_ROM_READ(b32, dst_value_out, addr_value);"""


# # # ADDRESS STUFF # # #

[[instructions]]
# Basically lea... without indexing and everything cool about lea
mnenomic = "addr_of"
[[instructions.registers]]
name = "dst"
mode = "stack"
type = "u32"
write = true
[[instructions.registers]]
name = "src"
mode = "stack"
type = "undefined"
[instructions.action]
cpp_silence_clang = ["shorten-64-to-32"]
cpp = """
dst_value_out = STACK_POINTER + src_reg;"""

[[instructions]]
# grow/shrink stack
mnenomic = "stack_resize"
[[instructions.registers]]
name = "size"
mode = "immediate"
type = "i16"
[instructions.action]
cpp = """
STACK_POINTER = STACK_POINTER + size_value;"""

[[instructions]]
# set stack pointer
mnenomic = "set_stack"
[[instructions.registers]]
name = "stack_pointer"
mode = "stack"
type = "u32"
read = true
[instructions.action]
cpp = """
STACK_POINTER = stack_pointer_value_in;"""

[[instructions]]
# get stack pointer
mnenomic = "get_stack"
[[instructions.registers]]
name = "dst"
mode = "stack"
type = "u32"
write = true
[instructions.action]
cpp_silence_clang = ["shorten-64-to-32"]
cpp = """
dst_value_out = STACK_POINTER;"""


# # # Arithmetic # # #

[[instructions]]
# u32 = u32 + u32
mnenomic = "add.u32"
[[instructions.registers]]
name = "dst"
mode = "stack"
type = "u32"
write = true
[[instructions.registers]]
name = "op1"
mode = "stack"
type = "u32"
read = true
[[instructions.registers]]
name = "op2"
mode = "stack"
type = "u32"
read = true
[instructions.action]
cpp = """
dst_value_out = op1_value_in + op2_value_in;"""

[[instructions]]
# u32 = u32 + imm
mnenomic = "add.u32.imm"
[[instructions.registers]]
name = "dst"
mode = "stack"
type = "u32"
write = true
[[instructions.registers]]
name = "op1"
mode = "stack"
type = "u32"
read = true
[[instructions.registers]]
name = "op2"
mode = "immediate"
type = "u16"
[instructions.action]
cpp = """
dst_value_out = op1_value_in + op2_value;"""


[[instructions]]
# u32 = u32 - u32
mnenomic = "sub.u32"
[[instructions.registers]]
name = "dst"
mode = "stack"
type = "u32"
write = true
[[instructions.registers]]
name = "op1"
mode = "stack"
type = "u32"
read = true
[[instructions.registers]]
name = "op2"
mode = "stack"
type = "u32"
read = true
[instructions.action]
cpp = """
dst_value_out = op1_value_in - op2_value_in;"""

[[instructions]]
# u32 = u32 - imm
mnenomic = "sub.u32.imm"
[[instructions.registers]]
name = "dst"
mode = "stack"
type = "u32"
write = true
[[instructions.registers]]
name = "op1"
mode = "stack"
type = "u32"
read = true
[[instructions.registers]]
name = "op2"
mode = "immediate"
type = "u16"
[instructions.action]
cpp = """
dst_value_out = op1_value_in - op2_value;"""
